<?php/** * JdvThumbs Class *  */// no direct accessdefined('_JEXEC') or die('Restricted access');class JdvThumbs2{	/* массив параметров для эскизов */	var $_thumbParams;	function __construct()	{		$this->_thumbParams['width'] = 200;		$this->_thumbParams['height'] = 200;		$this->_thumbParams['quality'] = 100;		$this->_thumbParams['method'] = 'resized';		$this->_thumbParams['alpha'] = 1;		$this->_thumbParams['thumbtype'] = 'jpg';		$this->_thumbParams['sizeon'] = 'both';		$this->_thumbParams['prefix'] = 'thumb';		$this->_thumbParams['thumbsdir'] = 'images/plg_jdvthumbs';		$this->_thumbParams['addlogo'] = 0;		$this->_thumbParams['logosrc'] = 'images/powered_by.png';		$this->_thumbParams['logoposition'] = 'lefttop';		$this->_thumbParams['replace'] = 0;		$this->_thumbParams['md5'] = 1;		$this->_thumbParams['src_x'] = 0;		$this->_thumbParams['src_y'] = 0;		$this->_thumbParams['src_w'] = 0;		$this->_thumbParams['src_h'] = 0;				/* $this->_thumbParams['juri_root'] = JURI::root(); */		$this->_thumbParams['jpath_root'] = JPATH_ROOT;	}	function set($param, $value){		$this->_thumbParams[$param] = $value;	}		function get($param){		return $this->_thumbParams[$param];	}		function doThumbnail( $file, $is_abs=false )	{		extract($this->_thumbParams);		//echo $width;		$filename = basename( $file );		$file_ext = $this->getFileExt( $filename );						$thumb_ext = strtolower($this->getFileExt( $filename ));				$file_thumb = '';		$file_src = '';				$path_dest = $this->_thumbParams['jpath_root'] . DIRECTORY_SEPARATOR . str_replace( array('/', '\\'), DIRECTORY_SEPARATOR, $thumbsdir );			$slash_pos = strpos($file, '/');		$file = ( $slash_pos !== false && $slash_pos == 0 ? substr($file, 1) : $file );				if (!in_array($file_ext, array('jpg', 'jpeg', 'png', 'gif'))){			return;		}		//unset($array_ext);		$md5_str = @md5( $file.'-'.filemtime($file).'-'.$width.$height.$method.$quality );		$file_thumb = $thumbsdir . '/' . $prefix . ($md5 ? '-' . $md5_str : '-' . $filename) . '.' . $thumb_ext;		$file_src = $file;				if ($this->chkCache( $file, $thumb_ext )) {			return array($file_thumb, $file_src);		}		//list($width_source, $height_source) = getimagesize($this->_thumbParams['juri_root'].$file);		list($width_source, $height_source) = getimagesize($file);		switch ($sizeon) {		case 'width':			$new_width = $width;			$percent = $width / $width_source;			$new_height = $height_source * $percent;			break;					case 'height':			$new_height = $height;			$percent = $height / $height_source;			$new_width = $width_source * $percent;			break;				case 'crop':			if (($width / $height) > ($width_source / $height_source)){				$new_width = $width;				$percent = $width / $width_source;				$new_height = $height_source * $percent;			} else {				$new_height = $height;				$percent = $height / $height_source;				$new_width = $width_source * $percent;				}			break;					default:			if (($width / $height) < ($width_source / $height_source)){				$new_width = $width;				$percent = $width / $width_source;				$new_height = $height_source * $percent;			} else {				$new_height = $height;				$percent = $height / $height_source;				$new_width = $width_source * $percent;			}		}				$path_logo = str_replace( array('/', '\\'), DIRECTORY_SEPARATOR, $logosrc );		$path_logo = JPATH_BASE . DIRECTORY_SEPARATOR . $path_logo;		if (($new_width < $width_source && $new_height < $height_source)) {			$thumb = imagecreatetruecolor($new_width, $new_height);		} else {					if (($thumbtype == 'jpg' || $thumbtype == 'jpeg') && $file_ext != $thumbtype || ($addlogo && file_exists($path_logo))) {				$new_width = $width_source;				$new_height = $height_source;				$thumb = imagecreatetruecolor($new_width, $new_height );			}else{				if (!copy( $file, $path_dest . DIRECTORY_SEPARATOR . $prefix . ($md5 ? '-' . $md5_str : '') . '.' . $thumb_ext)) {				}				//return;				return array($file_thumb, $file_src);			}								}					switch ($file_ext) {		case 'jpg':			$source = @imagecreatefromjpeg($file);			break;					case 'jpeg':			$source = @imagecreatefromjpeg($file);			break;		case 'png':			if ($alpha && ($thumbtype != 'jpg' || $thumbtype != 'jpeg')){				$source = @imagecreatefrompng($file);				imagealphablending($thumb, false);				imagesavealpha($thumb, true);			}else{				$source_tmp = @imagecreatefrompng($file);				$source  = imagecreatetruecolor($width_source, $height_source);				$bg = imagecolorallocate($source, 255, 255, 255);				imagefill($source, 0, 0, $bg);				imageCopy($source, $source_tmp, 0, 0, 0, 0, $width_source, $height_source);			}						break;					case 'gif':			$source_tmp = @imagecreatefromgif($file);						$source  = imagecreatetruecolor($width_source, $height_source);			$bg = imagecolorallocate($source, 255, 255, 255);			imagefill($source, 0, 0, $bg);			imageCopy($source, $source_tmp, 0, 0, 0, 0, $width_source, $height_source);			break;		}		if ($method == 'resampled'){			// Resampled						switch ($sizeon){			case 'crop':				$thumb_tmp = imagecreatetruecolor( $new_width, $new_height );				imagecopyresampled($thumb_tmp, $source, 0, 0, 0, 0, $new_width, $new_height, $width_source, $height_source);				$thumb = imagecreatetruecolor($width, $height);				imageCopy($thumb, $thumb_tmp, 0, 0, 0, 0, $width, $height);				imagedestroy($thumb_tmp);				break;							case 'custom':				$thumb_tmp = imagecreatetruecolor( $width, $height );				imagecopyresampled($thumb_tmp, $source, 0, 0, $src_x, $src_y, $width, $height, $src_w, $src_h);				$thumb = imagecreatetruecolor($width, $height);				imageCopy($thumb, $thumb_tmp, 0, 0, 0, 0, $width, $height);				imagedestroy($thumb_tmp);				break;							default:				imagecopyresampled($thumb, $source, 0, 0, 0, 0, $new_width, $new_height, $width_source, $height_source);			}		} else{			switch ($sizeon){			case 'crop':				$thumb_tmp = imagecreatetruecolor( $new_width, $new_height );				imagecopyresized($thumb_tmp, $source, 0, 0, 0, 0, $new_width, $new_height, $width_source, $height_source);				$thumb = imagecreatetruecolor($width, $height);				imageCopy($thumb, $thumb_tmp, 0, 0, 0, 0, $width, $height);				imagedestroy($thumb_tmp);				break;							case 'custom':				$thumb_tmp = imagecreatetruecolor( $width, $height );				imagecopyresized($thumb_tmp, $source, 0, 0, $src_x, $src_y, $width, $height, $src_w, $src_h);												$thumb = imagecreatetruecolor($width, $height);				imageCopy($thumb, $thumb_tmp, 0, 0, 0, 0, $width, $height);				imagedestroy($thumb_tmp);				break;							default:				imagecopyresized($thumb, $source, 0, 0, 0, 0, $new_width, $new_height, $width_source, $height_source);							}		}		if($addlogo && file_exists($path_logo)){			$logo_ext = $this->getFileExt( basename($logosrc ) );					if ($logo_ext == 'png'){				$thumb_tmp = imagecreatefrompng($logosrc);				/* imagealphablending($thumb_tmp, false);				imagesavealpha($thumb_tmp, true); */			}			if ($logo_ext == 'jpg' || $logo_ext == 'jpeg'){				$thumb_tmp = imagecreatefromjpg($logosrc);			}			list($logo_width, $logo_height) = getimagesize($logosrc);						$logoposition_x = 0;			$logoposition_y = 0;						if ($logoposition == 'righttop'){				$logoposition_x = $new_width - $logo_width;				$logoposition_y = 0;			}			if ($logoposition == 'rightbottom'){				$logoposition_x = $new_width - $logo_width;				$logoposition_y = $new_height - $logo_height;			}			if ($logoposition == 'leftbottom'){				$logoposition_x = 0;				$logoposition_y = $new_height - $logo_height;			}						imageCopy($thumb, $thumb_tmp, $logoposition_x, $logoposition_y, 0, 0, $logo_width, $logo_height);						if (isset($thumb_tmp)){				imagedestroy($thumb_tmp);			}		}		switch ($thumb_ext) {		case 'jpg':			// Set the content prefix header - in this case image/jpeg			header('Content-prefix: image/jpeg');			break;					case 'jpeg':			// Set the content prefix header - in this case image/jpeg			header('Content-prefix: image/jpeg');			break;		case 'png':			header('Content-prefix: image/png');			break;					case 'gif':			// Set the content prefix header - in this case image/jpeg			header('Content-prefix: image/gif');			break;		default:			$n--;			continue 2;			break;		}		$hash = ($md5 ? '-' . $md5_str : '-'.$filename);		$cachefile = $path_dest . DIRECTORY_SEPARATOR . $prefix . $hash . '.' . $thumb_ext;					// Output		switch ($thumb_ext) {		case 'jpg':			@imagejpeg($thumb, $cachefile, $quality);			break;					case 'jpeg':			@imagejpeg($thumb, $cachefile, $quality);			break;		case 'png':			$q = ($quality - 10) / 100;			@imagepng($thumb, $cachefile, $q, PNG_ALL_FILTERS );			break;					case 'gif':			@imagegif($thumb, $cachefile );			break;					}		// Free up memory		imagedestroy($thumb);		imagedestroy($source);		$this->__construct();		return array( $file_thumb, $file_src );	} // end function doThumbnail				function chkCache( $file, $thumb_ext )	{		$filename = basename( $file );				extract($this->_thumbParams);				$md5_str = @md5( $file.'-'.filemtime($file).'-'.$width.$height.$method.$quality );				$hash = ($md5 ? '-' . $md5_str : '-'.$filename);				$thumbsdir = $this->get( 'thumbsdir' );		$thumbsdir = str_replace( array('/', '\\'), DIRECTORY_SEPARATOR, $thumbsdir );		$path_dest = $this->_thumbParams['jpath_root'] . DIRECTORY_SEPARATOR . $thumbsdir;			if (!JFolder::exists($path_dest)) {			//JFolder::create($path_dest, '0755');			JFolder::create($path_dest);		}		$cachefile = $path_dest . DIRECTORY_SEPARATOR . $prefix . $hash . '.' . $thumb_ext;		if (!$replace)		if (is_file( $cachefile )) {			return true;		}		return false;	}			function getFileExt( $filename )	{		$file_extension = strtolower(substr(strrchr($filename,"."),1));		return $file_extension;	}		function getURL( $filename )	{		/* $path_from_base = str_replace(JPATH_SITE . DIRECTORY_SEPARATOR, '', $filename);		$juri_root = $this->_thumbParams['juri_root'];		$path_from_base = str_replace($juri_root, '', $path_from_base);		$url = str_replace( DIRECTORY_SEPARATOR, '/', $path_from_base );		$url = $juri_root . $url; */		$url = $filename;		return $url;	}}?>